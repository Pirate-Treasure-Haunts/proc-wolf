#!/usr/bin/env python3
"""
proc-wolf: Advanced Process Monitor and Security Tool
----------------------------------------------------
Monitors, detects, and handles suspicious processes using a multi-layered
verification approach and escalating response system.
"""

import os
import sys
import time
import logging
import platform
import subprocess
import psutil
import winreg
import ctypes
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Set, Tuple, Optional
import hashlib
import sqlite3
import re
import win32api
import win32process
import win32security
import wmi

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filename='proc-wolf.log',
    filemode='a'
)

# Console handler for immediate feedback
console = logging.StreamHandler()
console.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
console.setFormatter(formatter)
logging.getLogger('').addHandler(console)

# Global Constants
VERSION = "1.0.0"
CONFIG_FILE = "proc-wolf.config"
DB_FILE = "proc-wolf.db"
MAX_WARNINGS = 3
CHECK_INTERVAL = 5  # seconds

# Threat Levels
THREAT_LEVEL = {
    0: "TRUSTED",
    1: "LOW",
    2: "MEDIUM",
    3: "HIGH",
    4: "CRITICAL"
}

# Action Levels
ACTION_LEVEL = {
    0: "MONITOR",
    1: "WARN",
    2: "SOFT_KILL",
    3: "FORCE_KILL",
    4: "PREVENT_RESURRECTION"
}

# System-critical process list (base level hardcoded protection)
SYSTEM_CRITICAL = {
    # Windows core processes
    "system", "smss.exe", "csrss.exe", "wininit.exe", "services.exe", 
    "lsass.exe", "winlogon.exe", "explorer.exe", "svchost.exe", 
    "taskmgr.exe", "dwm.exe", "conhost.exe", "sihost.exe", "fontdrvhost.exe",
    "ctfmon.exe", "ShellExperienceHost.exe", "SearchUI.exe", "RuntimeBroker.exe",
    "SecurityHealthService.exe", "SgrmBroker.exe", "spoolsv.exe", "lsm.exe",
    "ntoskrnl.exe", "Registry", "Idle", "Memory Compression",
    
    # System utilities
    "regedit.exe", "notepad.exe", "cmd.exe", "powershell.exe", "mmc.exe",
    "control.exe", "regsvr32.exe", "rundll32.exe", "msiexec.exe",
    "taskhost.exe", "taskhostw.exe", "dllhost.exe",
    
    # Windows Defender
    "MsMpEng.exe", "NisSrv.exe", "MpCmdRun.exe", "SecurityHealthSystray.exe",
    
    # System updates
    "wuauclt.exe", "UsoClient.exe", "MusNotification.exe", "WaaSMedicSvc.exe",
    
    # Basic user apps
    "calc.exe", "SystemSettings.exe", "SearchApp.exe",
    
    # Our own process
    os.path.basename(sys.executable) if not sys.executable.endswith("python.exe") else "proc-wolf.exe"
}

# Known trusted publishers (for digital signature verification)
TRUSTED_PUBLISHERS = {
    "Microsoft Windows", "Microsoft Corporation", "Microsoft Windows Publisher",
    "Google Inc", "Google LLC", "Mozilla Corporation", "Apple Inc.", "Adobe Inc.",
    "Adobe Systems", "Dropbox, Inc", "Valve", "Valve Corporation",
    "Steam", "NVIDIA Corporation", "Advanced Micro Devices, Inc.",
    "Intel Corporation", "Dell Inc.", "Hewlett-Packard", "Lenovo", "Logitech",
    "Realtek Semiconductor", "Oracle Corporation", "VMware, Inc.",
}

# Suspicious patterns in process names (regex)
SUSPICIOUS_PATTERNS = [
    r'^[a-zA-Z0-9]{16,}\.exe$',  # Long random name
    r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}\.exe$',  # GUID-like
    r'^[a-zA-Z0-9]{8,}\.(exe|dll|scr)$',  # Random name with executable extension
    r'^(svc|service|agent|host|system|windows|microsoft)[0-9]{2,}\.exe$',  # System-looking with numbers
    r'^[a-zA-Z0-9]{1,3}\.exe$',  # Extremely short executable name
    r'(backdoor|trojan|keylog|hack|crack|steal|spy)',  # Suspicious words
]

# Process repository for tracking state between checks
process_repository = {}

# Process warning counts
warnings = {}

class Database:
    """SQLite database for persistent storage of process information"""
    
    def __init__(self, db_file):
        self.db_file = db_file
        self._init_db()
    
    def _init_db(self):
        """Initialize the database schema if it doesn't exist"""
        conn = sqlite3.connect(self.db_file)
        cursor = conn.cursor()
        
        # Create tables if they don't exist
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS process_history (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            path TEXT,
            cmd_line TEXT,
            hash TEXT,
            digital_signature TEXT,
            first_seen TIMESTAMP,
            last_seen TIMESTAMP,
            threat_level INTEGER,
            times_killed INTEGER DEFAULT 0,
            trusted BOOLEAN
        )
        ''')
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS resurrections (
            id INTEGER PRIMARY KEY,
            process_id INTEGER,
            timestamp TIMESTAMP,
            kill_method TEXT,
            FOREIGN KEY (process_id) REFERENCES process_history(id)
        )
        ''')
        
        conn.commit()
        conn.close()
    
    def add_or_update_process(self, process_info):
        """Add new process or update existing one"""
        conn = sqlite3.connect(self.db_file)
        cursor = conn.cursor()
        
        # Check if process exists
        cursor.execute(
            "SELECT id, times_killed FROM process_history WHERE hash = ? OR (name = ? AND path = ?)",
            (process_info['hash'], process_info['name'], process_info['path'])
        )
        
        result = cursor.fetchone()
        
        if result:
            # Update existing process
            process_id, times_killed = result
            cursor.execute(
                """
                UPDATE process_history SET 
                last_seen = ?, times_killed = ?, threat_level = ?
                WHERE id = ?
                """,
                (
                    datetime.now().isoformat(), 
                    times_killed,
                    process_info['threat_level'],
                    process_id
                )
            )
            conn.commit()
            conn.close()
            return process_id
        else:
            # Insert new process
            cursor.execute(
                """
                INSERT INTO process_history 
                (name, path, cmd_line, hash, digital_signature, first_seen, last_seen, threat_level, trusted) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """,
                (
                    process_info['name'],
                    process_info['path'],
                    process_info['cmd_line'],
                    process_info['hash'],
                    process_info['digital_signature'],
                    datetime.now().isoformat(),
                    datetime.now().isoformat(),
                    process_info['threat_level'],
                    process_info['trusted']
                )
            )
            process_id = cursor.lastrowid
            conn.commit()
            conn.close()
            return process_id
    
    def record_resurrection(self, process_id, kill_method):
        """Record when a process resurrects after being killed"""
        conn = sqlite3.connect(self.db_file)
        cursor = conn.cursor()
        
        cursor.execute(
            "INSERT INTO resurrections (process_id, timestamp, kill_method) VALUES (?, ?, ?)",
            (process_id, datetime.now().isoformat(), kill_method)
        )
        
        # Increment times_killed counter
        cursor.execute(
            "UPDATE process_history SET times_killed = times_killed + 1 WHERE id = ?",
            (process_id,)
        )
        
        conn.commit()
        conn.close()
    
    def get_process_history(self, process_name=None, process_path=None, process_hash=None):
        """Get process history by name, path or hash"""
        conn = sqlite3.connect(self.db_file)
        cursor = conn.cursor()
        
        query = "SELECT * FROM process_history WHERE 1=1"
        params = []
        
        if process_name:
            query += " AND name = ?"
            params.append(process_name)
        
        if process_path:
            query += " AND path = ?"
            params.append(process_path)
        
        if process_hash:
            query += " AND hash = ?"
            params.append(process_hash)
        
        cursor.execute(query, params)
        result = cursor.fetchone()
        conn.close()
        
        return result

def is_admin():
    """Check if the script is running with administrator privileges"""
    try:
        return ctypes.windll.shell32.IsUserAnAdmin() != 0
    except:
        return False

def get_process_hash(process_path):
    """Get SHA-256 hash of the process executable"""
    try:
        if not os.path.exists(process_path):
            return None
        
        with open(process_path, "rb") as f:
            file_hash = hashlib.sha256()
            # Read the file in chunks to handle large files
            for chunk in iter(lambda: f.read(4096), b""):
                file_hash.update(chunk)
        
        return file_hash.hexdigest()
    except:
        return None

def check_digital_signature(process_path):
    """Check if the process is digitally signed by a trusted publisher"""
    try:
        # Using Windows API to check digital signature
        signatures = win32api.GetSignatureName(process_path)
        
        if not signatures:
            return None
            
        # Check if any of the signatures are from trusted publishers
        for sig in signatures:
            for trusted in TRUSTED_PUBLISHERS:
                if trusted.lower() in sig.lower():
                    return sig
                    
        return signatures[0]  # Return the signature even if not trusted
    except:
        return None

def is_suspicious_name(process_name):
    """Check if the process name matches suspicious patterns"""
    for pattern in SUSPICIOUS_PATTERNS:
        if re.search(pattern, process_name, re.IGNORECASE):
            return True
    return False

def is_suspicious_location(process_path):
    """Check if process is running from a suspicious location"""
    if not process_path:
        return True
        
    suspicious_locations = [
        os.environ.get('TEMP', ''),
        os.environ.get('TMP', ''),
        r'C:\Users\Public',
        r'C:\ProgramData\Temp',
    ]
    
    # Check standard locations - processes outside these might be suspicious
    standard_locations = [
        r'C:\Program Files',
        r'C:\Program Files (x86)',
        r'C:\Windows',
        r'C:\Windows\System32',
        r'C:\Windows\SysWOW64',
    ]
    
    # Directly in suspicious location
    for loc in suspicious_locations:
        if loc and process_path.startswith(loc):
            return True
    
    # Not in any standard location
    in_standard = False
    for loc in standard_locations:
        if process_path.startswith(loc):
            in_standard = True
            break
            
    # Additional checks for processes outside standard locations
    if not in_standard:
        # Check if it's in a user profile but not in a standard subfolder
        if r'C:\Users' in process_path:
            standard_user_folders = ['Desktop', 'Documents', 'Downloads', 'AppData']
            is_in_standard_user_folder = False
            
            for folder in standard_user_folders:
                if fr'\{folder}\\' in process_path:
                    is_in_standard_user_folder = True
                    break
                    
            if not is_in_standard_user_folder:
                return True
    
    return False

def has_suspicious_behavior(pid, proc_info=None):
    """Check for suspicious process behavior"""
    try:
        if not proc_info:
            proc_info = psutil.Process(pid)
            
        # Check for suspicious traits
        suspicious_traits = []
        
        # High CPU or memory usage
        try:
            if proc_info.cpu_percent(interval=0.1) > 80:
                suspicious_traits.append("High CPU usage")
        except:
            pass
            
        try:
            if proc_info.memory_percent() > 25:
                suspicious_traits.append("High memory usage")
        except:
            pass
        
        # Check open files - hidden/temp locations
        try:
            for file in proc_info.open_files():
                if 'temp' in file.path.lower() or '$recycle.bin' in file.path.lower():
                    suspicious_traits.append(f"Accessing suspicious file: {file.path}")
        except:
            pass
        
        # Check network connections - suspicious ports or connections
        try:
            for conn in proc_info.connections():
                # Check for commonly abused ports
                suspicious_ports = [4444, 31337, 1337, 666, 6666, 1234, 12345, 54321]
                if conn.laddr.port in suspicious_ports or conn.raddr and conn.raddr.port in suspicious_ports:
                    suspicious_traits.append(f"Suspicious network port: {conn.laddr.port}")
        except:
            pass
        
        return suspicious_traits if suspicious_traits else None
    except:
        return None

def evaluate_threat_level(process_info):
    """
    Evaluate the threat level of a process based on multiple factors
    Returns: threat_level (0-4)
    """
    # Start with 0 (trusted) for system critical processes
    if process_info['name'].lower() in [x.lower() for x in SYSTEM_CRITICAL]:
        return 0
    
    # Start with 0 (trusted) and add points for suspicious factors
    threat_score = 0
    
    # Digital signature check
    if not process_info['digital_signature']:
        threat_score += 1
    elif not any(trusted.lower() in process_info['digital_signature'].lower() for trusted in TRUSTED_PUBLISHERS):
        threat_score += 0.5
    
    # Suspicious name patterns
    if is_suspicious_name(process_info['name']):
        threat_score += 1.5
    
    # Suspicious location
    if is_suspicious_location(process_info['path']):
        threat_score += 1
    
    # Suspicious behavior
    if process_info['suspicious_behavior']:
        threat_score += len(process_info['suspicious_behavior']) * 0.5
    
    # Hidden file
    if process_info['path'] and os.path.exists(process_info['path']):
        try:
            # Check if file has hidden attribute
            attrs = win32api.GetFileAttributes(process_info['path'])
            if attrs & 2:  # 2 is the hidden attribute
                threat_score += 1
        except:
            pass
    
    # Process running with elevated privileges
    if process_info['elevated']:
        threat_score += 0.5
    
    # Map score to threat level
    if threat_score <= 0.5:
        return 0  # TRUSTED
    elif threat_score <= 1.5:
        return 1  # LOW
    elif threat_score <= 2.5:
        return 2  # MEDIUM
    elif threat_score <= 3.5:
        return 3  # HIGH
    else:
        return 4  # CRITICAL

def get_action_level(threat_level, warnings_count):
    """Determine what action to take based on threat level and warnings"""
    if threat_level == 0:  # TRUSTED
        return 0  # MONITOR
    elif threat_level == 1:  # LOW
        return min(warnings_count, 1)  # WARN maximum
    elif threat_level == 2:  # MEDIUM
        return min(warnings_count, 2)  # Up to SOFT_KILL
    elif threat_level == 3:  # HIGH
        return min(warnings_count + 1, 3)  # Start at WARN, up to FORCE_KILL
    else:  # CRITICAL
        return min(warnings_count + 2, 4)  # Start at SOFT_KILL, up to PREVENT_RESURRECTION

def kill_process(pid, force=False):
    """Kill a process by PID"""
    try:
        process = psutil.Process(pid)
        if force:
            process.kill()  # SIGKILL equivalent
        else:
            process.terminate()  # SIGTERM equivalent
        
        # Allow some time for process to terminate
        gone, still_alive = psutil.wait_procs([process], timeout=3)
        return len(gone) > 0
    except:
        return False

def prevent_resurrection(pid, process_name, process_path):
    """Prevent a process from starting again"""
    try:
        # First, force kill the process
        kill_process(pid, force=True)
        
        # If it was a service, try to disable it
        try:
            # Try to get the service name from the process
            wmi_obj = wmi.WMI()
            services = wmi_obj.Win32_Service(ProcessId=pid)
            
            if services:
                service = services[0]
                # Disable the service
                result = service.ChangeStartMode("Disabled")
                if result[0] == 0:  # 0 means success
                    logging.info(f"Disabled service: {service.Name}")
                    
                    # Try to stop it if it's running
                    service.StopService()
        except:
            pass
        
        # Move the executable to quarantine if possible
        if process_path and os.path.exists(process_path):
            try:
                quarantine_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "quarantine")
                if not os.path.exists(quarantine_dir):
                    os.makedirs(quarantine_dir)
                
                # Move to quarantine with timestamped name to avoid conflicts
                quarantine_path = os.path.join(
                    quarantine_dir, 
                    f"{os.path.basename(process_path)}.{int(time.time())}.quarantine"
                )
                
                os.rename(process_path, quarantine_path)
                logging.info(f"Moved {process_path} to quarantine: {quarantine_path}")
            except Exception as e:
                logging.error(f"Failed to quarantine {process_path}: {e}")
                
        return True
    except Exception as e:
        logging.error(f"Failed to prevent resurrection of {process_name} (PID: {pid}): {e}")
        return False

def get_process_info(proc):
    """Get detailed process information for evaluation"""
    try:
        pid = proc.pid
        name = proc.name()
        
        try:
            path = proc.exe()
        except (psutil.AccessDenied, FileNotFoundError):
            path = None
            
        try:
            cmd_line = " ".join(proc.cmdline())
        except (psutil.AccessDenied, FileNotFoundError):
            cmd_line = None
        
        # Get process hash if path is available
        if path and os.path.exists(path):
            file_hash = get_process_hash(path)
        else:
            file_hash = None
        
        # Check digital signature
        digital_signature = check_digital_signature(path) if path else None
        
        # Check if process is elevated
        try:
            elevated = bool(proc.as_dict().get('uids'))  # Non-empty uids often indicates elevated
        except:
            elevated = False
        
        # Check for suspicious behavior
        suspicious_behavior = has_suspicious_behavior(pid, proc)
        
        # Create process info dictionary
        process_info = {
            "pid": pid,
            "name": name,
            "path": path,
            "cmd_line": cmd_line,
            "hash": file_hash,
            "digital_signature": digital_signature,
            "elevated": elevated,
            "suspicious_behavior": suspicious_behavior,
            "threat_level": 0,  # Will be evaluated later
            "trusted": False    # Will be evaluated later
        }
        
        # Evaluate threat level
        process_info["threat_level"] = evaluate_threat_level(process_info)
        
        # Mark as trusted if threat level is 0
        process_info["trusted"] = (process_info["threat_level"] == 0)
        
        return process_info
    except Exception as e:
        logging.error(f"Error getting process info: {e}")
        return None

def init_database():
    """Initialize the application database"""
    try:
        return Database(DB_FILE)
    except Exception as e:
        logging.error(f"Failed to initialize database: {e}")
        sys.exit(1)

def monitor_processes(db):
    """Main monitoring function"""
    logging.info(f"proc-wolf v{VERSION} started. Watching processes...")
    
    # Dictionary to track previous state
    previous_pids = set()
    
    while True:
        try:
            # Get all current processes
            current_processes = {}
            current_pids = set()
            
            for proc in psutil.process_iter(['pid', 'name', 'exe', 'cmdline']):
                try:
                    pid = proc.pid
                    current_pids.add(pid)
                    
                    # Skip if we already know this process is trusted
                    if pid in process_repository and process_repository[pid]["trusted"]:
                        continue
                    
                    # Get detailed information about the process
                    process_info = get_process_info(proc)
                    if not process_info:
                        continue
                    
                    # Store in our current process dictionary
                    current_processes[pid] = process_info
                    
                    # Add or update in database
                    db_id = db.add_or_update_process(process_info)
                    process_info["db_id"] = db_id
                    
                    # Update our repository
                    process_repository[pid] = process_info
                    
                    # Check if process requires action
                    if not process_info["trusted"]:
                        process_name = process_info["name"]
                        
                        # Initialize or increment warning count
                        if process_name not in warnings:
                            warnings[process_name] = 0
                        else:
                            warnings[process_name] += 1
                        
                        # Determine action based on threat level and warnings
                        action_level = get_action_level(process_info["threat_level"], warnings[process_name])
                        
                        # Log the detection
                        logging.warning(
                            f"Suspicious process: {process_name} (PID: {pid}), "
                            f"Threat: {THREAT_LEVEL[process_info['threat_level']]}, "
                            f"Action: {ACTION_LEVEL[action_level]}, "
                            f"Warning #{warnings[process_name] + 1}"
                        )
                        
                        # Execute appropriate action
                        if action_level == 0:  # MONITOR
                            continue
                        elif action_level == 1:  # WARN
                            # Just log it, we've already done that
                            pass
                        elif action_level == 2:  # SOFT_KILL
                            logging.warning(f"Attempting soft kill of {process_name} (PID: {pid})")
                            if kill_process(pid, force=False):
                                logging.info(f"Successfully soft-killed {process_name} (PID: {pid})")
                                db.record_resurrection(process_info["db_id"], "SOFT_KILL")
                        elif action_level == 3:  # FORCE_KILL
                            logging.warning(f"Attempting force kill of {process_name} (PID: {pid})")
                            if kill_process(pid, force=True):
                                logging.info(f"Successfully force-killed {process_name} (PID: {pid})")
                                db.record_resurrection(process_info["db_id"], "FORCE_KILL")
                        elif action_level == 4:  # PREVENT_RESURRECTION
                            logging.warning(f"Preventing resurrection of {process_name} (PID: {pid})")
                            if prevent_resurrection(pid, process_name, process_info["path"]):
                                logging.info(f"Successfully prevented resurrection of {process_name} (PID: {pid})")
                                db.record_resurrection(process_info["db_id"], "PREVENT_RESURRECTION")
                
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    continue
            
            # Check for disappeared processes (potentially revived later)
            disappeared = previous_pids - current_pids
            if disappeared:
                # If any suspicious processes disappeared, we reset their warning count
                # This allows proc-wolf to re-evaluate if they come back
                for pid in disappeared:
                    if pid in process_repository and not process_repository[pid]["trusted"]:
                        process_name = process_repository[pid]["name"]
                        if process_name in warnings:
                            warnings[process_name] = 0
            
            # Update previous pids for next iteration
            previous_pids = current_pids
            
            # Clear processes that are trusted from repository to save memory
            for pid in list(process_repository.keys()):
                if pid not in current_pids or process_repository[pid]["trusted"]:
                    del process_repository[pid]
            
            # Sleep before next check
            time.sleep(CHECK_INTERVAL)
            
        except KeyboardInterrupt:
            logging.info("proc-wolf stopped by user.")
            break
        except Exception as e:
            logging.error(f"Error in main monitoring loop: {e}")
            time.sleep(CHECK_INTERVAL)

def main():
    """Main entry point"""
    # Check for administrative privileges
    if not is_admin():
        logging.warning("proc-wolf is not running with administrator privileges. Some features may not work.")
    
    logging.info(f"Starting proc-wolf v{VERSION}...")
    logging.info(f"System: {platform.system()} {platform.version()}")
    logging.info(f"Python: {platform.python_version()}")
    
    # Initialize database
    db = init_database()
    
    # Start monitoring processes
    try:
        monitor_processes(db)
    except KeyboardInterrupt:
        logging.info("proc-wolf stopped by user.")

if __name__ == "__main__":
    main()