#!/usr/bin/env python3
"""
Build script for creating proc-wolf executables
"""

import os
import sys
import subprocess
import shutil

def install_requirements():
    """Install required packages for building the exe"""
    print("Installing required packages...")
    packages = [
        "pyinstaller",
        "pywin32",
        "psutil",
        "wmi",
        "tabulate",
        "pystray",
        "pillow"
    ]
    
    for package in packages:
        print(f"Installing {package}...")
        subprocess.run([sys.executable, "-m", "pip", "install", package])

def build_background_exe():
    """Build the background version of proc-wolf"""
    print("\nBuilding background executable...")
    subprocess.run([
        "pyinstaller",
        "--noconfirm",
        "--onefile",
        "--windowed",
        "--icon=wolf.ico" if os.path.exists("wolf.ico") else "",
        "--name=ProcWolf",
        "--add-data=proc_wolf.py;.",
        "--add-data=proc_wolf_full_3-0.py;.",
        "proc_wolf_background.py"
    ])
    
    print("\nBackground executable built successfully!")
    print("Output: ./dist/ProcWolf.exe")

def build_cli_exe():
    """Build the CLI version of proc-wolf"""
    print("\nBuilding CLI executable...")
    subprocess.run([
        "pyinstaller",
        "--noconfirm",
        "--onefile",
        "--console",
        "--icon=wolf.ico" if os.path.exists("wolf.ico") else "",
        "--name=ProcWolfCLI",
        "--add-data=proc_wolf.py;.",
        "proc_wolf_full_3-0.py"
    ])
    
    print("\nCLI executable built successfully!")
    print("Output: ./dist/ProcWolfCLI.exe")

def build_service_exe():
    """Build the service version of proc-wolf"""
    print("\nBuilding service executable...")
    subprocess.run([
        "pyinstaller",
        "--noconfirm",
        "--onefile",
        "--console",
        "--icon=wolf.ico" if os.path.exists("wolf.ico") else "",
        "--name=ProcWolfService",
        "--add-data=proc_wolf.py;.",
        "proc_wolf_service.py"
    ])
    
    print("\nService executable built successfully!")
    print("Output: ./dist/ProcWolfService.exe")

def create_installer_script():
    """Create a batch script to install the service"""
    install_script = """@echo off
echo ===================================
echo Proc-Wolf Installation
echo ===================================
echo.

:: Check for administrator privileges
net session >nul 2>&1
if %errorLevel% neq 0 (
    echo Error: This script must be run as administrator!
    echo Please right-click and select "Run as administrator"
    pause
    exit /B 1
)

echo Installing Proc-Wolf Service...
ProcWolfService.exe --startup auto install
echo.
echo Starting Proc-Wolf Service...
ProcWolfService.exe start
echo.
echo Installation complete!
echo To start the background monitor, run ProcWolf.exe
echo To use the command line interface, run ProcWolfCLI.exe
echo.
pause
"""
    
    uninstall_script = """@echo off
echo ===================================
echo Proc-Wolf Uninstallation
echo ===================================
echo.

:: Check for administrator privileges
net session >nul 2>&1
if %errorLevel% neq 0 (
    echo Error: This script must be run as administrator!
    echo Please right-click and select "Run as administrator"
    pause
    exit /B 1
)

echo Stopping Proc-Wolf Service...
ProcWolfService.exe stop
echo.
echo Removing Proc-Wolf Service...
ProcWolfService.exe remove
echo.
echo Uninstallation complete!
echo.
pause
"""
    
    # Create install script
    with open("./dist/install.bat", "w") as file:
        file.write(install_script)
    
    # Create uninstall script
    with open("./dist/uninstall.bat", "w") as file:
        file.write(uninstall_script)
    
    print("\nInstallation scripts created:")
    print("- ./dist/install.bat")
    print("- ./dist/uninstall.bat")

def create_readme():
    """Create a readme file"""
    readme = """# Proc-Wolf Process Monitor

## Files Included
- ProcWolf.exe - Background monitor with system tray icon
- ProcWolfCLI.exe - Command line interface for direct control
- ProcWolfService.exe - Windows service for continuous monitoring
- install.bat - Script to install the Windows service
- uninstall.bat - Script to uninstall the Windows service

## Installation
1. Right-click on install.bat and select "Run as administrator"
2. The service will be installed and started automatically

## Usage
- **Background Monitor**: Run ProcWolf.exe to start the system tray monitor
- **Command Line Interface**: Run ProcWolfCLI.exe with the following commands:
  - `ProcWolfCLI.exe list` - List all processes
  - `ProcWolfCLI.exe list --assess` - List all processes with threat assessment
  - `ProcWolfCLI.exe assess --name chrome.exe` - Assess a specific process
  - `ProcWolfCLI.exe kill --name badprocess.exe` - Kill a process
  - `ProcWolfCLI.exe nuke --name malware.exe` - Completely remove a process
  - `ProcWolfCLI.exe monitor` - Monitor processes in real-time
  - `ProcWolfCLI.exe history` - View process history

## Uninstallation
1. Right-click on uninstall.bat and select "Run as administrator"
2. The service will be stopped and removed

## Log Files
- Service logs: C:\\ProgramData\\proc-wolf\\proc-wolf-service.log
- Background logs: %LOCALAPPDATA%\\proc-wolf\\proc-wolf-background.log
- CLI logs: proc-wolf-cli.log (in the same directory as the executable)
"""
    
    # Create readme
    with open("./dist/README.txt", "w") as file:
        file.write(readme)
    
    print("\nReadme file created:")
    print("- ./dist/README.txt")

def main():
    """Main function"""
    print("===================================")
    print("Proc-Wolf EXE Builder")
    print("===================================")
    
    # Install requirements
    install_requirements()
    
    # Build executables
    build_background_exe()
    build_cli_exe()
    build_service_exe()
    
    # Create installation scripts
    create_installer_script()
    
    # Create readme
    create_readme()
    
    print("\nAll executables built successfully!")
    print("Files are available in the ./dist directory")
    print("===================================")

if __name__ == "__main__":
    main()